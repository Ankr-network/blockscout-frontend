name: Protocol deploy
run-name: Deploy of ${{ github.ref_name }} to ${{github.event.inputs.environment}} with ${{github.event.inputs.api}} API

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Target
        required: true
        options:
          - STAGE # https://d2yi7f75l807l4.cloudfront.net/rpc/
          - BS1 # https://d3db4riryz1bgp.cloudfront.net/rpc/
          - BS2 # https://d3szt7jbieoxw1.cloudfront.net/rpc/
          - BS3 # https://d323cy8wsnnk5d.cloudfront.net/rpc/
          - BS4 # https://d1mhdtzwx6cuz4.cloudfront.net/rpc/
          - PROD # https://www.ankr.com/rpc/
      api:
        type: choice
        description: API
        required: true
        options:
          - STAGE
          - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: 'packages/protocol/.nvmrc'
          cache: 'yarn'

      - name: Send slack message
        if: ${{ github.event.inputs.environment == 'PROD' }}
        id: slack-init
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ github.event.repository.name }}: Deploy of ${{ github.ref_name }} to ${{github.event.inputs.environment}} started",
              "channel": "C02F5BTM33P"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_POST_MESSAGE }}

      - name: Prevent wrong version releasing
        if: ${{ github.event.inputs.environment == 'PROD' && github.ref != 'refs/heads/main' }}
        run: |
          echo "Production deployment is possible only from the main branch"
          exit 1

      - name: Prevent wrong api releasing
        if: ${{ github.event.inputs.environment == 'PROD' && github.event.inputs.api != 'PROD' }}
        run: |
          echo "Production deployment is possible only with PROD api"
          exit 1

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build stage
        working-directory: ./packages/protocol
        if: ${{ github.event.inputs.api == 'STAGE' }}
        env:
          SENTRY_DSN: https://5bcd2db48e7b4aec8e4f8c37d4f31901@o286716.ingest.sentry.io/6097657"
          NODE_OPTIONS: "--max-old-space-size=8192"
        run: |
          yarn build:stage:turbo
          yarn postbuild

      - name: Build production
        working-directory: ./packages/protocol
        if: ${{ github.event.inputs.api == 'PROD' }}
        env:
          SENTRY_DSN: https://5bcd2db48e7b4aec8e4f8c37d4f31901@o286716.ingest.sentry.io/6097657"
          NODE_OPTIONS: "--max-old-space-size=8192"
        run: |
          yarn build:prod:turbo
          yarn postbuild

      - name: Generate sitemap
        working-directory: ./packages/protocol
        run: node generate-sitemap.cjs

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy files to the production website with the AWS CLI
        working-directory: ./packages/protocol
        env:
          DOMAIN: ${{ vars[format('{0}{1}', github.event.inputs.environment, '_DOMAIN')] }}
          DISTRIBUTION_ID: ${{ vars[format('{0}{1}', github.event.inputs.environment, '_DISTRIBUTION_ID')] }}
        run: |
          aws s3 sync --delete ./build s3://$DOMAIN/rpc/ --acl public-read --cache-control "public,max-age=600,s-maxage=3600"
          aws configure set preview.cloudfront true
          echo "Invalidating CDN network"
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' | jq -r '.Invalidation.Id'`
          echo "Invalidation ID is $INVALIDATION_ID"
          echo "CDN Invalidation request is sent."
          echo "Deployed to https://$DOMAIN"

      - name: Set redirections
        working-directory: ./packages/protocol
        env:
          DOMAIN: ${{ vars[format('{0}{1}', github.event.inputs.environment, '_DOMAIN')] }}
        run: |
          node redirects.js


      - name: Send slack message
        if: ${{ success() && github.event.inputs.environment == 'PROD' }}
        id: slack-success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ github.event.repository.name }}: Deploy of ${{ github.ref_name }} to ${{github.event.inputs.environment}} completed",
              "channel": "C02F5BTM33P"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_POST_MESSAGE_HERE }}

      - name: Send slack message
        if: ${{ failure() && github.event.inputs.environment == 'PROD' }}
        id: slack-failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ github.event.repository.name }}: Deploy of ${{ github.ref_name }} to ${{github.event.inputs.environment}} failed",
              "channel": "C02F5BTM33P"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_POST_MESSAGE_HERE }}
