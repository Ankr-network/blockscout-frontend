name: Standalone Protocol deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Target
        required: true
        options:
          - STANDALONE_PROD # https://chainId.public-rpc.com/ | https://bscrpc.com/erigonbsc
          - BS1 # https://bs-1-stage.dccn.ankr.com/chain/chainId
          - BS4 # https://bs-4-stage.dccn.ankr.com/chain/chainId
      api:
        type: choice
        description: API
        required: true
        options:
          - STAGE
          - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16.13.0'
          cache: 'yarn'

      - name: Prevent wrong version releasing
        if: ${{ github.event.inputs.environment == 'PROD' && github.ref != 'refs/heads/main' }}
        run: |
          echo "Production deployment is possible only from the main branch"
          exit 1

      - name: Get deployment information
        run: |
          echo "Branch: ${{github.ref}}"
          echo "Environment: ${{github.event.inputs.api}}"
          echo "Domain: ${{github.event.inputs.environment}}"

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Build stage with stage api
        working-directory: ./packages/standalone-protocol
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
        if: ${{ (github.event.inputs.environment == 'BS1' || github.event.inputs.environment == 'BS4') && github.event.inputs.api == 'STAGE' }}
        run: |
          yarn build:stage:turbo

      - name: Build stage with prod api
        working-directory: ./packages/standalone-protocol
        if: ${{ (github.event.inputs.environment == 'BS1' || github.event.inputs.environment == 'BS4') && github.event.inputs.api == 'PROD' }}
        run: |
          yarn build:prod:turbo

      - name: Build production
        working-directory: ./packages/standalone-protocol
        env:
          NAMES: eth near arbitrum iotex avalanche nervos harmony moonbeam gnosis syscoin scrt filecoin klaytn polygon bsc fantom zkevm chiliz
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

        if: ${{ github.event.inputs.environment == 'STANDALONE_PROD' && github.event.inputs.api == 'PROD' }}
        run: |
          yarn build-chains:prod

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy files to the production website with the AWS CLI
        working-directory: ./packages/standalone-protocol
        env:
          DOMAIN: ${{ secrets[format('{0}{1}', github.event.inputs.environment, '_DOMAIN')] }}
          DISTRIBUTION_ID: ${{ secrets[format('{0}{1}', github.event.inputs.environment, '_DISTRIBUTION_ID')] }}
        if: ${{ github.event.inputs.environment == 'STANDALONE_PROD' }}
        run: |
          aws s3 sync --delete ./build-chains/$NAMES s3://$DOMAIN/ --acl public-read --cache-control "public,max-age=600,s-maxage=3600"
          aws configure set preview.cloudfront true
          echo "Invalidating CDN network"
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' | jq -r '.Invalidation.Id'`
          echo "Invalidation ID is $INVALIDATION_ID"
          echo "CDN Invalidation request is sent."

      - name: Copy files to the stage website with the AWS CLI
        working-directory: ./packages/standalone-protocol
        env:
          DOMAIN: ${{ secrets[format('{0}{1}', github.event.inputs.environment, '_DOMAIN')] }}
          DISTRIBUTION_ID: ${{ secrets[format('{0}{1}', github.event.inputs.environment, '_DISTRIBUTION_ID')] }}
        if: ${{ github.event.inputs.environment == 'BS1' || github.event.inputs.environment == 'BS4' }}
        run: |
          aws s3 sync --delete ./build s3://$DOMAIN/ --acl public-read --cache-control "public,max-age=600,s-maxage=3600"
          aws configure set preview.cloudfront true
          echo "Invalidating CDN network"
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' | jq -r '.Invalidation.Id'`
          echo "Invalidation ID is $INVALIDATION_ID"
          echo "CDN Invalidation request is sent."
