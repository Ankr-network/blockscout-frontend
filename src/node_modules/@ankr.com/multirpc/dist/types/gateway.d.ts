import { AxiosInstance, AxiosRequestConfig } from "axios";
import { Base64, IJwtToken, INotarizedTransaction, IPlayer, IProposal, IThresholdKey, PrefixedHex, TCrypto, TJwtTokenType, TThresholdKeyRole, UUID, Web3Address } from "./types";
export declare class ApiGateway {
    private readonly publicConfig;
    private readonly privateConfig;
    publicApi: AxiosInstance;
    privateApi: AxiosInstance;
    constructor(publicConfig: AxiosRequestConfig, privateConfig: AxiosRequestConfig);
    getPlayers(offset: number, limit: number): Promise<[IPlayer[], boolean]>;
    getProposals(offset: number, limit: number): Promise<[IProposal[], boolean]>;
    getThresholdKeys(offset: number, limit: number, filter?: {
        name?: string;
    }): Promise<[IThresholdKey[], boolean]>;
    getThresholdKeyById(id: UUID): Promise<{
        threshold_key: IThresholdKey;
        deposit_addresses?: Record<PrefixedHex, PrefixedHex>;
    }>;
    getJwtTokens(offset: number, limit: number): Promise<[IJwtToken[], boolean]>;
    getJwtTokenById(id: UUID): Promise<IJwtToken>;
    requestJwtToken(request: {
        transaction_hash: PrefixedHex;
        public_key: Base64;
        threshold_key: UUID;
    }): Promise<IJwtToken>;
    getNotarizedTransactions(offset: number, limit: number): Promise<[INotarizedTransaction[], boolean]>;
    generateThresholdKey(request: {
        crypto: TCrypto;
        players: UUID[];
        threshold: number;
        roles: TThresholdKeyRole[];
        party: string;
    }): Promise<IThresholdKey>;
    issueJwtToken(request: {
        jwt_token: PrefixedHex | Web3Address;
        threshold_key: UUID;
        public_key: Base64;
        token_type: TJwtTokenType;
    }): Promise<IJwtToken>;
    notarizeTransaction(request: {
        threshold_key: UUID;
        chain_id: Base64;
        transaction_hash: Base64;
        block_number?: number;
        transaction_index?: number;
    }): Promise<INotarizedTransaction>;
}
