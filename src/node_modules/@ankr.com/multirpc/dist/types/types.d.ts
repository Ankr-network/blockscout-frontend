export declare type BigInt = string;
export declare type UUID = string;
export declare type Web3Address = string;
export declare type Base64 = string;
export declare type PrefixedHex = string;
export declare type TBlockchain = 'BLOCKCHAIN_WEB3' | 'BLOCKCHAIN_SUBSTRATE';
export declare type TCrypto = 'CRYPTO_ECDSA_SECP256K1' | 'CRYPTO_ECDSA_SECP256R1' | 'CRYPTO_BLST_BLS12381' | 'CRYPTO_SCHNORR_SECP256K1' | 'CRYPTO_EDDSA_ED25519';
export declare type TPlayerStatus = 'PLAYER_STATUS_ACTIVE' | 'PLAYER_STATUS_DISABLED';
export interface IPlayer {
    id: string;
    x509_cert: string;
    status: TPlayerStatus;
    committee: string;
    created: number;
    changed: number;
}
export declare type TProposalStatus = 'PROPOSAL_STATUS_QUEUED' | 'PROPOSAL_STATUS_EXECUTING' | 'PROPOSAL_STATUS_DONE' | 'PROPOSAL_STATUS_FAILED';
export declare type TProposalType = 'PROPOSAL_TYPE_GENERATE_THRESHOLD_KEY' | 'PROPOSAL_TYPE_NOTARIZE_TRANSACTION' | 'PROPOSAL_TYPE_NOTARIZE_BLOCK' | 'PROPOSAL_TYPE_ISSUE_JWT_TOKEN';
export interface IProposal {
    id: UUID;
    status: TProposalStatus;
    type: TProposalType;
    message: Base64;
    author: UUID;
    index: string;
}
export declare type TThresholdKeyStatus = 'THRESHOLD_KEY_STATUS_PENDING' | 'THRESHOLD_KEY_STATUS_GENERATED' | 'THRESHOLD_KEY_STATUS_FAILED';
export declare type TThresholdKeyRole = 'THRESHOLD_KEY_ROLE_NOTARIZE' | 'THRESHOLD_KEY_ROLE_SIGN' | 'THRESHOLD_KEY_ROLE_TRANSACT' | 'THRESHOLD_KEY_ROLE_ISSUE';
export interface IThresholdKey {
    id: UUID;
    status: TThresholdKeyStatus;
    crypto: TCrypto;
    public_key: Base64;
    players: UUID[];
    threshold: number;
    proposal: UUID;
    party: string;
}
export declare type TNotarizedTransactionStatus = 'NOTARIZED_TRANSACTION_STATUS_CONFIRMED' | 'NOTARIZED_TRANSACTION_STATUS_REPLACED' | 'NOTARIZED_TRANSACTION_STATUS_ORPHANED' | 'NOTARIZED_TRANSACTION_STATUS_REVERTED';
export interface INotarizedTransaction {
    id: UUID;
    status: TNotarizedTransactionStatus;
    blockchain: TBlockchain;
    transaction_hash: Base64;
    block_number: BigInt;
    block_hash: Base64;
    transaction_index: number;
    receipt_hash: Base64;
    transferred_amount: BigInt;
    chain_id: Base64;
    threshold_key: UUID;
    proposal: UUID;
    payload: Base64;
    signature: Base64;
}
export declare type TJwtTokenStatus = 'JWT_TOKEN_STATUS_ACTIVE' | 'JWT_TOKEN_STATUS_EXPIRED' | 'JWT_TOKEN_STATUS_REVOKED';
export declare type TJwtTokenType = 'JWT_TOKEN_TYPE_UNKNOWN' | 'JWT_TOKEN_TYPE_USER' | 'JWT_TOKEN_TYPE_ADMIN';
export interface IJwtToken {
    id: PrefixedHex;
    threshold_key: UUID;
    status: TJwtTokenStatus;
    type: TJwtTokenType;
    owner_address: Web3Address;
    signing_data: Base64;
    public_key: Base64;
    signed_token: Base64;
    expires_at: number;
}
export declare enum Chain {
    avalanche = "avalanche",
    eth = "eth",
    fantom = "fantom",
    polygon = "polygon",
    solana = "solana",
    xdai = "xdai"
}
export declare enum Token {
    avax = "avax",
    eth = "eth",
    ftm = "ftm",
    ksm = "ksm",
    sol = "sol",
    stake = "stake"
}
