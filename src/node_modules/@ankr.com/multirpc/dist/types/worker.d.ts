import { AxiosInstance, AxiosRequestConfig } from "axios";
import { Chain, IJwtToken, UUID, Web3Address } from "./types";
export interface INodeEntity {
    id: string;
    blockchain: Chain;
    scheme: string;
    requestUrl: string;
    websocketUrl?: string;
    weight: number;
    continent: string;
    country: string;
    city: string;
    features: string[];
    isArchive: boolean;
}
export declare type TBlockchainFeature = 'rpc' | 'ws';
export interface IBlockchainEntity {
    id: string;
    stats?: {
        reqs: number;
    };
    features: TBlockchainFeature[];
    name: string;
}
export declare type IWorkerGlobalStatus = {
    uniqueVisitors: number;
    uniqueVisitorsHistory: Record<string, number>;
    totalRequests: number;
    totalRequestsHistory: Record<string, number>;
    totalCached: number;
    totalCachedHistory: Record<string, number>;
    totalServed: number;
    totalServedHistory: Record<string, number>;
    dataCached: number;
    dataCachedHistory: Record<string, number>;
    countries: Record<string, {
        country: string;
        bytes: number;
        requests: number;
    }>;
};
export declare type IWorkerTotalStats = {
    count: number;
    sum: {
        edgeResponseBytes: number;
        visits: number;
    };
}[];
export declare type Timeframe = '24h' | '7d' | '30d';
export declare class WorkerGateway {
    private readonly config;
    api: AxiosInstance;
    constructor(config: AxiosRequestConfig);
    addJwtToken(jwtToken: IJwtToken): void;
    removeJwtToken(): void;
    apiGetBlockchains(): Promise<IBlockchainEntity[]>;
    apiGetNodes(blockchain?: string): Promise<INodeEntity[]>;
    apiImportJwtToken(jwtToken?: string): Promise<{
        token: string;
        id: UUID;
        address: Web3Address;
        tier: number;
        roles: number[];
    }>;
    apiGetGlobalStats(blockchain?: string): Promise<IWorkerGlobalStatus>;
    apiGetTimeframeStats(blockchain: string, timeframe: Timeframe): Promise<IWorkerGlobalStatus>;
    apiGetTotalStats(blockchain?: string): Promise<IWorkerTotalStats>;
    apiGetLegacyStats(blockchain?: string): Promise<IWorkerTotalStats>;
    backofficeGetBlockchains(): Promise<IBlockchainEntity[]>;
    backofficeCreateOrUpdateBlockchain(node: IBlockchainEntity): Promise<{}>;
    backofficeDeleteBlockchain(blockchain: IBlockchainEntity): Promise<IBlockchainEntity>;
    backofficeMigrateLegacy(): Promise<any>;
    backofficeGetNodes(blockchain?: string): Promise<INodeEntity[]>;
    backofficeCreateOrUpdateNode(node: INodeEntity): Promise<{}>;
    backofficeDeleteNode(node: INodeEntity): Promise<INodeEntity>;
}
