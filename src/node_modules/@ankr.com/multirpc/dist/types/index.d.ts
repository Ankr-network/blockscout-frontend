import { IWeb3KeyProvider, IWeb3SendResult } from '@ankr.com/stakefi-web3';
import BigNumber from "bignumber.js";
import { ApiGateway } from "./gateway";
import { IConfig } from "./config";
import { ContractManager } from "./contract";
import { Base64, IJwtToken, PrefixedHex, UUID, Web3Address } from "./types";
import { IBlockchainEntity, IWorkerGlobalStatus, Timeframe, WorkerGateway } from "./worker";
import { IManagedPromise } from "./stepper";
export default class MultiRpcSdk {
    private readonly keyProvider;
    private readonly config;
    private workerGateway?;
    private apiGateway?;
    private contractManager?;
    constructor(keyProvider: IWeb3KeyProvider, config: IConfig);
    getBlockchains(): Promise<IBlockchainEntity[]>;
    isUserHasDeposit(user: Web3Address): Promise<PrefixedHex | false>;
    loginAsUserEx(user: Web3Address, encryptionKey?: Base64): IManagedPromise<IJwtToken | false, 'get_user_info' | 'get_encryption_key' | 'decrypt_jwt_token'>;
    loginAsUser(user: Web3Address, encryptionKey?: Base64): Promise<IJwtToken | false>;
    loginAsAdmin(user: Web3Address): Promise<IJwtToken | false>;
    fetchPublicUrls(): Promise<Record<string, {
        blockchain: IBlockchainEntity;
        rpcUrl: string;
        wsUrl: string;
    }>>;
    fetchPrivateUrls(jwtToken: IJwtToken): Promise<Record<string, {
        blockchain: IBlockchainEntity;
        rpcUrl: string;
        wsUrl: string;
    }>>;
    getBlockchainStats(blockchain: string): Promise<IWorkerGlobalStatus>;
    getBlockchainTimeFrameStats(blockchain: string, timeframe: Timeframe): Promise<IWorkerGlobalStatus>;
    depositAnkr(amount: BigNumber | BigNumber.Value): Promise<{
        allowance?: IWeb3SendResult;
        deposit: IWeb3SendResult;
    }>;
    isJwtTokenIssueAvailable(transactionHash: PrefixedHex): Promise<{
        remainingBlocks?: number;
        isReady: boolean;
    }>;
    requestUserEncryptionKey(): Promise<Base64>;
    issueJwtToken(transactionHash: PrefixedHex, thresholdKey: UUID, encryptionKey?: Base64): Promise<IJwtToken>;
    calcJwtTokenHash(jwtToken: IJwtToken): Promise<string>;
    /**
     * @internal for internal usage, try to avoid
     */
    getApiGateway(): ApiGateway;
    /**
     * @internal for internal usage, try to avoid
     */
    getContractManager(): ContractManager;
    /**
     * @internal for internal usage, try to avoid
     */
    getWorkerGateway(): WorkerGateway;
    getKeyProvider(): IWeb3KeyProvider;
}
export * from './config';
export * from './contract';
export * from './gateway';
export * from './types';
export * from './utils';
export * from './worker';
