export interface IManagedPromise<ResultType, ActionType> {
    nextUntil(step: ActionType): Promise<boolean>;
    currentStep(): ActionType | false;
    next(): Promise<boolean>;
    toPromise(): Promise<ResultType>;
    getResult(): ResultType;
}
export declare type StateTransitionFunction<StateType, ResultType> = (state: StateType, resolve: (result: ResultType) => StateType) => PromiseLike<StateType>;
export declare class ManagedPromise<StateType, ResultType, ActionType> implements IManagedPromise<ResultType, ActionType> {
    private state;
    private handlers;
    private result;
    constructor(state: StateType);
    newAction(action: ActionType, handler: StateTransitionFunction<StateType, ResultType>): ManagedPromise<StateType, ResultType, ActionType>;
    currentStep(): ActionType | false;
    nextUntil(step: ActionType): Promise<boolean>;
    private execNextTransition;
    next(): Promise<boolean>;
    toPromise(): Promise<ResultType>;
    getResult(): ResultType;
}
