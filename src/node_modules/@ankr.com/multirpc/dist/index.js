"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var gateway_1 = require("./gateway");
var contract_1 = require("./contract");
var worker_1 = require("./worker");
var stepper_1 = require("./stepper");
var MultiRpcSdk = /** @class */ (function () {
    function MultiRpcSdk(keyProvider, config) {
        this.keyProvider = keyProvider;
        this.config = config;
    }
    MultiRpcSdk.prototype.getBlockchains = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getWorkerGateway().apiGetBlockchains()];
            });
        });
    };
    MultiRpcSdk.prototype.isUserHasDeposit = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContractManager().getLatestUserEventLogHash(user)];
            });
        });
    };
    MultiRpcSdk.prototype.loginAsUserEx = function (user, encryptionKey) {
        var _this = this;
        var state = {
            encryptionKey: encryptionKey,
        };
        var promise = new stepper_1.ManagedPromise({});
        promise.newAction('get_user_info', function (ss, resolve) { return __awaiter(_this, void 0, void 0, function () {
            var transactionHash, thresholdKeys, thresholdKey, currentAccount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContractManager().getLatestUserEventLogHash(user)];
                    case 1:
                        transactionHash = _a.sent();
                        if (!transactionHash) {
                            return [2 /*return*/, resolve(false)];
                        }
                        return [4 /*yield*/, this.getApiGateway().getThresholdKeys(0, 1, {
                                name: 'MultiRPC',
                            })];
                    case 2:
                        thresholdKeys = (_a.sent())[0];
                        if (!thresholdKeys.length)
                            throw new Error("There is no threshold keys");
                        thresholdKey = thresholdKeys[0].id;
                        currentAccount = this.keyProvider.currentAccount();
                        // return new state
                        return [2 /*return*/, __assign(__assign({}, ss), { transactionHash: transactionHash, thresholdKey: thresholdKey, currentAccount: currentAccount })];
                }
            });
        }); });
        promise.newAction('get_encryption_key', function (ss) { return __awaiter(_this, void 0, void 0, function () {
            var currentAccount, encryptionKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentAccount = ss.currentAccount, encryptionKey = ss.encryptionKey;
                        if (!!encryptionKey) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getContractManager().getEncryptionPublicKey(currentAccount)];
                    case 1:
                        encryptionKey = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, __assign(__assign({}, ss), { encryptionKey: encryptionKey })];
                }
            });
        }); });
        promise.newAction('decrypt_jwt_token', function (ss, resolve) { return __awaiter(_this, void 0, void 0, function () {
            var transactionHash, thresholdKey, encryptionKey, jwtToken, metaMaskJsonData, _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        transactionHash = ss.transactionHash, thresholdKey = ss.thresholdKey, encryptionKey = ss.encryptionKey;
                        return [4 /*yield*/, this.getApiGateway().requestJwtToken({
                                transaction_hash: transactionHash,
                                public_key: encryptionKey,
                                threshold_key: thresholdKey,
                            })
                            // decrypt signed token using client's private key
                        ];
                    case 1:
                        jwtToken = _b.sent();
                        metaMaskJsonData = Buffer.from(jwtToken.signed_token, 'base64').toString('ascii');
                        _a = jwtToken;
                        return [4 /*yield*/, this.getContractManager().decryptMessageUsingPrivateKey(metaMaskJsonData)
                            // try to import jwt token (backend do it also as well, so failure is not critical)
                        ];
                    case 2:
                        _a.signed_token = _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.getWorkerGateway().apiImportJwtToken(jwtToken.signed_token)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _b.sent();
                        console.error("failed to import jwt token: " + e_1.message);
                        return [3 /*break*/, 6];
                    case 6: 
                    // resolve final result
                    return [2 /*return*/, resolve(jwtToken)];
                }
            });
        }); });
        return promise;
    };
    MultiRpcSdk.prototype.loginAsUser = function (user, encryptionKey) {
        return __awaiter(this, void 0, void 0, function () {
            var transactionHash, thresholdKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContractManager().getLatestUserEventLogHash(user)];
                    case 1:
                        transactionHash = _a.sent();
                        if (transactionHash === false) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.getApiGateway().getThresholdKeys(0, 1, {
                                name: 'MultiRPC',
                            })];
                    case 2:
                        thresholdKeys = (_a.sent())[0];
                        if (!thresholdKeys.length)
                            throw new Error("There is no threshold keys");
                        return [2 /*return*/, this.issueJwtToken(transactionHash, thresholdKeys[0].id, encryptionKey)];
                }
            });
        });
    };
    MultiRpcSdk.prototype.loginAsAdmin = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var thresholdKeys, currentAccount, publicKey, jwtToken, metaMaskJsonData, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getApiGateway().getThresholdKeys(0, 1, {
                            name: 'MultiRPC',
                        })];
                    case 1:
                        thresholdKeys = (_b.sent())[0];
                        if (!thresholdKeys.length)
                            throw new Error("There is no threshold keys");
                        currentAccount = this.keyProvider.currentAccount();
                        return [4 /*yield*/, this.getContractManager().getEncryptionPublicKey(currentAccount)
                            // send issue request to ankr protocol
                        ];
                    case 2:
                        publicKey = _b.sent();
                        return [4 /*yield*/, this.getApiGateway().issueJwtToken({
                                jwt_token: user,
                                threshold_key: thresholdKeys[0].id,
                                public_key: publicKey,
                                token_type: 'JWT_TOKEN_TYPE_ADMIN',
                            })
                            // decrypt signed token using client's private key
                        ];
                    case 3:
                        jwtToken = _b.sent();
                        metaMaskJsonData = Buffer.from(jwtToken.signed_token, 'base64').toString('ascii');
                        _a = jwtToken;
                        return [4 /*yield*/, this.getContractManager().decryptMessageUsingPrivateKey(metaMaskJsonData)];
                    case 4:
                        _a.signed_token = _b.sent();
                        this.getWorkerGateway().addJwtToken(jwtToken);
                        return [2 /*return*/, jwtToken];
                }
            });
        });
    };
    MultiRpcSdk.prototype.fetchPublicUrls = function () {
        return __awaiter(this, void 0, void 0, function () {
            var blockchains, result, _i, blockchains_1, blockchain, hasRpc, hasWs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkerGateway().apiGetBlockchains()];
                    case 1:
                        blockchains = _a.sent();
                        result = {};
                        for (_i = 0, blockchains_1 = blockchains; _i < blockchains_1.length; _i++) {
                            blockchain = blockchains_1[_i];
                            hasRpc = blockchain.features.includes('rpc'), hasWs = blockchain.features.includes('ws');
                            result[blockchain.id] = {
                                blockchain: blockchain,
                                rpcUrl: hasRpc ? this.config.publicRpcUrl.replace('{blockchain}', blockchain.id) : '',
                                wsUrl: hasWs ? this.config.publicWsUrl.replace('{blockchain}', blockchain.id) : '',
                            };
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    MultiRpcSdk.prototype.fetchPrivateUrls = function (jwtToken) {
        return __awaiter(this, void 0, void 0, function () {
            var blockchains, result, tokenHash, _i, blockchains_2, blockchain, hasRpc, hasWs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkerGateway().apiGetBlockchains()];
                    case 1:
                        blockchains = _a.sent();
                        result = {};
                        return [4 /*yield*/, this.calcJwtTokenHash(jwtToken)];
                    case 2:
                        tokenHash = _a.sent();
                        for (_i = 0, blockchains_2 = blockchains; _i < blockchains_2.length; _i++) {
                            blockchain = blockchains_2[_i];
                            hasRpc = blockchain.features.includes('rpc'), hasWs = blockchain.features.includes('ws');
                            result[blockchain.id] = {
                                blockchain: blockchain,
                                rpcUrl: hasRpc ? this.config.privateRpcUrl.replace('{blockchain}', blockchain.id).replace('{user}', tokenHash) : '',
                                wsUrl: hasWs ? this.config.privateWsUrl.replace('{blockchain}', blockchain.id).replace('{user}', tokenHash) : '',
                            };
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    MultiRpcSdk.prototype.getBlockchainStats = function (blockchain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getWorkerGateway().apiGetGlobalStats(blockchain)];
            });
        });
    };
    MultiRpcSdk.prototype.getBlockchainTimeFrameStats = function (blockchain, timeframe) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getWorkerGateway().apiGetTimeframeStats(blockchain, timeframe)];
            });
        });
    };
    MultiRpcSdk.prototype.depositAnkr = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getContractManager().depositAnkrToWallet(new bignumber_js_1.default(amount))];
            });
        });
    };
    MultiRpcSdk.prototype.isJwtTokenIssueAvailable = function (transactionHash) {
        return __awaiter(this, void 0, void 0, function () {
            var latestKnownBlockNumber, transactionReceipt, passedBlocks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.keyProvider.getWeb3().eth.getBlockNumber()];
                    case 1:
                        latestKnownBlockNumber = _a.sent();
                        return [4 /*yield*/, this.keyProvider.getWeb3().eth.getTransactionReceipt(transactionHash)];
                    case 2:
                        transactionReceipt = _a.sent();
                        passedBlocks = latestKnownBlockNumber - transactionReceipt.blockNumber;
                        if (passedBlocks < this.config.confirmationBlocks) {
                            return [2 /*return*/, { remainingBlocks: this.config.confirmationBlocks - passedBlocks, isReady: false }];
                        }
                        return [2 /*return*/, { remainingBlocks: 0, isReady: true }];
                }
            });
        });
    };
    MultiRpcSdk.prototype.requestUserEncryptionKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount;
            return __generator(this, function (_a) {
                currentAccount = this.keyProvider.currentAccount();
                return [2 /*return*/, this.getContractManager().getEncryptionPublicKey(currentAccount)];
            });
        });
    };
    MultiRpcSdk.prototype.issueJwtToken = function (transactionHash, thresholdKey, encryptionKey) {
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount, jwtToken, metaMaskJsonData, _a, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        currentAccount = this.keyProvider.currentAccount();
                        if (!!encryptionKey) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getContractManager().getEncryptionPublicKey(currentAccount)];
                    case 1:
                        encryptionKey = _b.sent();
                        _b.label = 2;
                    case 2: return [4 /*yield*/, this.getApiGateway().requestJwtToken({
                            transaction_hash: transactionHash,
                            public_key: encryptionKey,
                            threshold_key: thresholdKey,
                        })
                        // decrypt signed token using client's private key
                    ];
                    case 3:
                        jwtToken = _b.sent();
                        metaMaskJsonData = Buffer.from(jwtToken.signed_token, 'base64').toString('ascii');
                        _a = jwtToken;
                        return [4 /*yield*/, this.getContractManager().decryptMessageUsingPrivateKey(metaMaskJsonData)
                            // try to import jwt token (backend do it also as well, so failure is not critical)
                        ];
                    case 4:
                        _a.signed_token = _b.sent();
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.getWorkerGateway().apiImportJwtToken(jwtToken.signed_token)];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_2 = _b.sent();
                        console.error("failed to import jwt token: " + e_2.message);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/, jwtToken];
                }
            });
        });
    };
    MultiRpcSdk.prototype.calcJwtTokenHash = function (jwtToken) {
        return __awaiter(this, void 0, void 0, function () {
            var secretToken, tokenBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, crypto.subtle.digest({ name: 'SHA-256' }, new TextEncoder().encode(jwtToken.signed_token))];
                    case 1:
                        secretToken = _a.sent(), tokenBuffer = Buffer.from(new Uint8Array(secretToken));
                        return [2 /*return*/, tokenBuffer.toString('hex')];
                }
            });
        });
    };
    /**
     * @internal for internal usage, try to avoid
     */
    MultiRpcSdk.prototype.getApiGateway = function () {
        if (this.apiGateway)
            return this.apiGateway;
        this.apiGateway = new gateway_1.ApiGateway({
            baseURL: this.config.walletPublicUrl,
        }, {
            baseURL: this.config.walletPrivateUrl,
        });
        return this.apiGateway;
    };
    /**
     * @internal for internal usage, try to avoid
     */
    MultiRpcSdk.prototype.getContractManager = function () {
        if (this.contractManager)
            return this.contractManager;
        this.contractManager = new contract_1.ContractManager(this.keyProvider, this.config);
        return this.contractManager;
    };
    /**
     * @internal for internal usage, try to avoid
     */
    MultiRpcSdk.prototype.getWorkerGateway = function () {
        if (this.workerGateway)
            return this.workerGateway;
        this.workerGateway = new worker_1.WorkerGateway({
            baseURL: this.config.workerUrl,
        });
        return this.workerGateway;
    };
    MultiRpcSdk.prototype.getKeyProvider = function () {
        return this.keyProvider;
    };
    return MultiRpcSdk;
}());
exports.default = MultiRpcSdk;
__exportStar(require("./config"), exports);
__exportStar(require("./contract"), exports);
__exportStar(require("./gateway"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./worker"), exports);
//# sourceMappingURL=index.js.map