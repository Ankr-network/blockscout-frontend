"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractManager = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var utils_1 = require("./utils");
var ABI_ANKR_PROTOCOL = require('./abi/AnkrProtocol.json');
var ABI_ANKR_TOKEN = require('./abi/AnkrToken.json');
var ContractManager = /** @class */ (function () {
    function ContractManager(keyProvider, config) {
        this.keyProvider = keyProvider;
        this.config = config;
        this.cachedEncryptionPublicKeys = new Map();
        this.ankrWalletContract = keyProvider.createContract(ABI_ANKR_PROTOCOL, config.ankrWalletContractAddress);
        this.ankrTokenContract = keyProvider.createContract(ABI_ANKR_TOKEN, config.ankrTokenContractAddress);
    }
    ContractManager.prototype.getEncryptionPublicKey = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedKey, publicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedKey = this.cachedEncryptionPublicKeys.get(account);
                        if (cachedKey)
                            return [2 /*return*/, cachedKey];
                        return [4 /*yield*/, this.keyProvider.getWeb3().givenProvider.request({
                                method: 'eth_getEncryptionPublicKey',
                                params: [account]
                            })];
                    case 1:
                        publicKey = _a.sent();
                        this.cachedEncryptionPublicKeys.set(account, publicKey);
                        console.log("Encryption public key is: " + publicKey);
                        return [2 /*return*/, publicKey];
                }
            });
        });
    };
    ContractManager.prototype.decryptMessageUsingPrivateKey = function (compatibleJsonData) {
        return __awaiter(this, void 0, void 0, function () {
            var account;
            return __generator(this, function (_a) {
                account = this.keyProvider.currentAccount();
                return [2 /*return*/, this.keyProvider.getWeb3().givenProvider.request({
                        method: 'eth_decrypt',
                        params: [compatibleJsonData, account],
                    })];
            });
        });
    };
    ContractManager.prototype.faucetAnkrTokensForTest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var account, receipt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        account = this.keyProvider.currentAccount();
                        return [4 /*yield*/, this.ankrTokenContract.methods.mint(account, '1000000000000000000000000000').send({ from: account, })];
                    case 1:
                        receipt = _a.sent();
                        console.log(receipt);
                        return [2 /*return*/];
                }
            });
        });
    };
    ContractManager.prototype.getLatestUserEventLogHash = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var tierAssignedEvents, validEvents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ankrWalletContract.getPastEvents('TierAssigned', {
                            filter: {
                                sender: user,
                            },
                            fromBlock: 'earliest',
                            toBlock: 'latest'
                        })];
                    case 1:
                        tierAssignedEvents = _a.sent();
                        console.log("Found next deposit event logs: " + JSON.stringify(tierAssignedEvents, null, 2));
                        validEvents = tierAssignedEvents.filter(function (event) {
                            var _a = event.returnValues, sender = _a.sender, roles = _a.roles, expires = _a.expires;
                            console.log("Found user event log: user=" + sender + " roles=" + roles + " expires=" + expires);
                            return new Date().getTime() / 1000 < expires;
                        });
                        if (!validEvents.length)
                            return [2 /*return*/, false];
                        return [2 /*return*/, validEvents[validEvents.length - 1].transactionHash];
                }
            });
        });
    };
    ContractManager.prototype.checkUserHaveEnoughAllowance = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount, scaledAmount, scaledAllowance, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        currentAccount = this.keyProvider.currentAccount();
                        scaledAmount = amount.multipliedBy(Math.pow(10, 18));
                        _a = bignumber_js_1.default.bind;
                        return [4 /*yield*/, this.ankrTokenContract.methods.allowance(currentAccount, this.config.ankrWalletContractAddress).call()];
                    case 1:
                        scaledAllowance = new (_a.apply(bignumber_js_1.default, [void 0, _b.sent()]))();
                        return [2 /*return*/, scaledAllowance.isGreaterThanOrEqualTo(scaledAmount)];
                }
            });
        });
    };
    ContractManager.prototype.allowTokensForAnkrDeposit = function (amount) {
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount, scaledAmount, scaledBalance, _a, scaledAllowance, _b, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        currentAccount = this.keyProvider.currentAccount();
                        scaledAmount = amount.multipliedBy(Math.pow(10, 18));
                        _a = bignumber_js_1.default.bind;
                        return [4 /*yield*/, this.ankrTokenContract.methods.balanceOf(currentAccount).call()];
                    case 1:
                        scaledBalance = new (_a.apply(bignumber_js_1.default, [void 0, _c.sent()]))();
                        if (scaledAmount.isGreaterThan(scaledBalance)) {
                            throw new Error("You don't have enough Ankr tokens");
                        }
                        _b = bignumber_js_1.default.bind;
                        return [4 /*yield*/, this.ankrTokenContract.methods.allowance(currentAccount, this.config.ankrWalletContractAddress).call()];
                    case 2:
                        scaledAllowance = new (_b.apply(bignumber_js_1.default, [void 0, _c.sent()]))();
                        if (scaledAllowance.isGreaterThanOrEqualTo(scaledAmount)) {
                            return [2 /*return*/, false];
                        }
                        data = this.ankrTokenContract.methods.approve(this.config.ankrWalletContractAddress, scaledAmount.toString(10))
                            .encodeABI();
                        return [2 /*return*/, this.keyProvider.sendTransactionAsync(currentAccount, this.config.ankrTokenContractAddress, {
                                data: data,
                                gasLimit: '200000'
                            })];
                }
            });
        });
    };
    ContractManager.prototype.depositAnkrToWallet = function (amount, expiresAfter) {
        if (expiresAfter === void 0) { expiresAfter = '31536000'; }
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount, scaledAmount, scaledBalance, _a, scaledAllowance, _b, allowanceSendResult, base64EncryptionPublicKey, hexEncryptionPublicKey, data, depositSendResult;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        currentAccount = this.keyProvider.currentAccount();
                        scaledAmount = amount.multipliedBy(Math.pow(10, 18));
                        _a = bignumber_js_1.default.bind;
                        return [4 /*yield*/, this.ankrTokenContract.methods.balanceOf(currentAccount).call()];
                    case 1:
                        scaledBalance = new (_a.apply(bignumber_js_1.default, [void 0, _c.sent()]))();
                        if (scaledAmount.isGreaterThan(scaledBalance)) {
                            throw new Error("You don't have enough Ankr tokens");
                        }
                        _b = bignumber_js_1.default.bind;
                        return [4 /*yield*/, this.ankrTokenContract.methods.allowance(currentAccount, this.config.ankrWalletContractAddress).call()];
                    case 2:
                        scaledAllowance = new (_b.apply(bignumber_js_1.default, [void 0, _c.sent()]))();
                        return [4 /*yield*/, (function () {
                                if (scaledAllowance.isLessThan(scaledAmount)) {
                                    var data_1 = _this.ankrTokenContract.methods.approve(_this.config.ankrWalletContractAddress, scaledAmount.toString(10))
                                        .encodeABI();
                                    return _this.keyProvider.sendTransactionAsync(currentAccount, _this.config.ankrTokenContractAddress, {
                                        data: data_1,
                                        gasLimit: '200000'
                                    });
                                }
                            })()];
                    case 3:
                        allowanceSendResult = _c.sent();
                        return [4 /*yield*/, this.getEncryptionPublicKey(currentAccount)];
                    case 4:
                        base64EncryptionPublicKey = _c.sent(), hexEncryptionPublicKey = utils_1.base64ToPrefixedHex(base64EncryptionPublicKey);
                        data = this.ankrWalletContract.methods.deposit(scaledAmount.toString(10), expiresAfter, hexEncryptionPublicKey)
                            .encodeABI();
                        return [4 /*yield*/, this.keyProvider.sendTransactionAsync(currentAccount, this.config.ankrWalletContractAddress, {
                                data: data,
                                gasLimit: '200000',
                            })];
                    case 5:
                        depositSendResult = _c.sent();
                        return [2 /*return*/, {
                                allowance: allowanceSendResult,
                                deposit: depositSendResult
                            }];
                }
            });
        });
    };
    ContractManager.prototype.getCurrentAnkrBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentAccount;
            return __generator(this, function (_a) {
                currentAccount = this.keyProvider.currentAccount();
                return [2 /*return*/, this.keyProvider.getTokenBalance(this.ankrTokenContract, currentAccount)];
            });
        });
    };
    ContractManager.prototype.getAnkrBalance = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.keyProvider.getTokenBalance(this.ankrTokenContract, user)];
            });
        });
    };
    return ContractManager;
}());
exports.ContractManager = ContractManager;
//# sourceMappingURL=contract.js.map