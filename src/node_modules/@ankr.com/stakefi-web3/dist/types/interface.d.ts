/// <reference types="node" />
import Web3 from "web3";
import { Contract } from "web3-eth-contract";
import { PromiEvent, TransactionReceipt } from "web3-core";
import { BigNumber } from "bignumber.js";
export interface IWeb3SendResult {
    receiptPromise: PromiEvent<TransactionReceipt>;
    transactionHash: string;
    rawTransaction: string;
}
export interface IWeb3KeyProvider {
    isConnected(): boolean;
    connectFromInjected(): Promise<void>;
    connect(web3: Web3): Promise<void>;
    disconnect(): Promise<void>;
    currentAccount(): string;
    currentChain(): number;
    getWeb3(): Web3;
    createContract(abi: any, address: string): Contract;
    signData(data: Buffer | string | Record<string, unknown>, address: string): Promise<string>;
    sendTransactionAsync(from: string, to: string, sendOptions: {
        data?: string;
        gasLimit?: string;
        value?: string;
        estimate?: boolean;
        nonce?: number;
    }): Promise<IWeb3SendResult>;
    getNativeBalance(address: string): Promise<BigNumber>;
    getTokenBalance(contract: Contract, address: string): Promise<BigNumber>;
    getLatestBlockHeight(): number;
    latestBlockHeightOrWait(): Promise<number>;
    watchAsset(config: {
        type: 'ERC20';
        address: string;
        symbol: string;
        decimals?: number;
        image?: string;
    }): Promise<void>;
}
