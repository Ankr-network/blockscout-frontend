/// <reference types="node" />
import Web3 from "web3";
import { provider as Provider } from "web3-core";
import { Contract } from "web3-eth-contract";
import { BigNumber } from "bignumber.js";
import { ChainId } from "./chains";
import { IWeb3KeyProviderConfig } from "./config";
import { IWeb3KeyProvider, IWeb3SendResult } from "./interface";
import { EventEmitter } from "events";
export declare class Web3KeyProvider implements IWeb3KeyProvider {
    private readonly config;
    private readonly eventEmitter;
    protected _web3: Web3 | undefined;
    private _latestBlockHeight;
    private _currentChain;
    private _blockTimer;
    private _unlockedAccount;
    constructor(config: IWeb3KeyProviderConfig, eventEmitter?: EventEmitter);
    connectFromInjected(): Promise<void>;
    isConnected(): boolean;
    waitForExpectedNetworkOrThrow(provider: Provider, expectedChain: ChainId): Promise<void>;
    connect(web3: Web3): Promise<void>;
    private unlockAccounts;
    disconnect(): Promise<void>;
    currentAccount(): string;
    currentChain(): number;
    getWeb3(): Web3;
    createContract(abi: any, address: string): Contract;
    getLatestBlockHeight(): number;
    latestBlockHeightOrWait(): Promise<number>;
    watchAsset(config: {
        type: 'ERC20';
        address: string;
        symbol: string;
        decimals?: number;
        image?: string;
    }): Promise<void>;
    private isMetaMask;
    private static parseWalletError;
    signData(data: Buffer | string | Record<string, unknown>, address: string): Promise<string>;
    sendTransactionAsync(from: string, to: string, sendOptions: {
        data?: string;
        gasLimit?: string;
        value?: string;
        estimate?: boolean;
        nonce?: number;
    }): Promise<IWeb3SendResult>;
    private tryGetRawTx;
    getNativeBalance(address: string): Promise<BigNumber>;
    getTokenBalance(contract: Contract, address: string): Promise<BigNumber>;
}
export declare function alwaysConnectedWeb3KeyProvider(keyProvider: IWeb3KeyProvider): IWeb3KeyProvider;
