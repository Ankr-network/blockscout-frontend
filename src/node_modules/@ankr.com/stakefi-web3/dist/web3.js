"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.alwaysConnectedWeb3KeyProvider = exports.Web3KeyProvider = void 0;
var web3_1 = __importDefault(require("web3"));
var bignumber_js_1 = require("bignumber.js");
var chains_1 = require("./chains");
var web3_utils_1 = require("web3-utils");
var common_1 = __importDefault(require("@ethereumjs/common"));
var tx_1 = require("@ethereumjs/tx");
var ethereumjs_util_1 = require("ethereumjs-util");
var events_1 = require("events");
var events_2 = require("./events");
var Web3KeyProvider = /** @class */ (function () {
    function Web3KeyProvider(config, eventEmitter) {
        if (eventEmitter === void 0) { eventEmitter = new events_1.EventEmitter(); }
        this.config = config;
        this.eventEmitter = eventEmitter;
        this._web3 = undefined;
        this._latestBlockHeight = -1;
        this._currentChain = 0;
        this._blockTimer = 0;
        this._unlockedAccount = '';
    }
    Web3KeyProvider.prototype.connectFromInjected = function () {
        return __awaiter(this, void 0, void 0, function () {
            var web3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // skip if already connected
                        if (this._web3) {
                            return [2 /*return*/];
                        }
                        else if (!window.ethereum) {
                            throw new Error("There is no any Web3 compatible extensions installed in your browserr");
                        }
                        web3 = new web3_1.default(window.ethereum);
                        return [4 /*yield*/, web3.eth.requestAccounts()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.connect(web3)];
                }
            });
        });
    };
    Web3KeyProvider.prototype.isConnected = function () {
        return !!this._web3;
    };
    Web3KeyProvider.prototype.waitForExpectedNetworkOrThrow = function (provider, expectedChain) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!provider.request) {
                            throw new Error("Wallet doesn't support switching to the " + (0, chains_1.getChainName)(expectedChain) + " network, please switch it manually");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, provider.request({
                                method: 'wallet_switchEthereumChain',
                                params: [{ chainId: (0, web3_utils_1.numberToHex)(expectedChain) }],
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        // This error code indicates that the chain has not been added to MetaMask.
                        if (error_1.code === 4902) {
                            throw new Error("Network for " + (0, chains_1.getChainName)(expectedChain) + " is not configured in your MetaMask");
                        }
                        throw new Error("Unable to switch network to " + (0, chains_1.getChainName)(expectedChain));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Web3KeyProvider.prototype.connect = function (web3) {
        return __awaiter(this, void 0, void 0, function () {
            var expectedChainId, remoteChainId, accounts;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expectedChainId = this.config.expectedChainId;
                        if (!!expectedChainId) return [3 /*break*/, 2];
                        return [4 /*yield*/, web3.eth.getChainId()];
                    case 1:
                        expectedChainId = _a.sent();
                        _a.label = 2;
                    case 2:
                        this.eventEmitter.emit(events_2.EVENT_BEFORE_CONNECT, {
                            keyProvider: this,
                            chainId: expectedChainId
                        });
                        return [4 /*yield*/, web3.eth.getChainId()];
                    case 3:
                        remoteChainId = _a.sent();
                        if (!(remoteChainId !== expectedChainId)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.waitForExpectedNetworkOrThrow(web3.currentProvider, this.config.expectedChainId)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this._blockTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                            var latestBlockHeight;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!this._web3) {
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, this._web3.eth.getBlockNumber()];
                                    case 1:
                                        latestBlockHeight = _a.sent();
                                        if (latestBlockHeight > this._latestBlockHeight) {
                                            this.eventEmitter.emit(events_2.EVENT_LATEST_BLOCK, {
                                                keyProvider: this,
                                                latestBlock: latestBlockHeight
                                            });
                                            this._latestBlockHeight = latestBlockHeight;
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 10000);
                        this._web3 = web3;
                        this._currentChain = remoteChainId;
                        return [4 /*yield*/, this.unlockAccounts(web3)];
                    case 6:
                        accounts = _a.sent();
                        this.eventEmitter.emit(events_2.EVENT_AFTER_CONNECT, {
                            keyProvider: this,
                            accounts: accounts
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Web3KeyProvider.prototype.unlockAccounts = function (web3) {
        return __awaiter(this, void 0, void 0, function () {
            var unlockedAccounts, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        unlockedAccounts = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, web3.eth.getAccounts()];
                    case 2:
                        unlockedAccounts = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error(e_1);
                        throw new Error('User denied access to account');
                    case 4:
                        console.log("Unlocked accounts: " + unlockedAccounts);
                        if (!unlockedAccounts.length || !unlockedAccounts[0]) {
                            throw new Error('Unable to detect unlocked MetaMask account');
                        }
                        this._unlockedAccount = unlockedAccounts[0];
                        console.log("Current account is " + this._unlockedAccount);
                        return [2 /*return*/, unlockedAccounts];
                }
            });
        });
    };
    Web3KeyProvider.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.eventEmitter.emit(events_2.EVENT_BEFORE_DISCONNECT, { keyProvider: this });
                this._latestBlockHeight = -1;
                this._web3 = undefined;
                this._currentChain = 0;
                clearInterval(this._blockTimer);
                this._blockTimer = 0;
                this._unlockedAccount = '';
                this.eventEmitter.emit(events_2.EVENT_AFTER_DISCONNECT, { keyProvider: this });
                return [2 /*return*/];
            });
        });
    };
    Web3KeyProvider.prototype.currentAccount = function () {
        if (!this._unlockedAccount)
            throw new Error('Web3 is not connected');
        return this._unlockedAccount;
    };
    Web3KeyProvider.prototype.currentChain = function () {
        if (!this._currentChain)
            throw new Error("Web3 is not connected");
        return this._currentChain;
    };
    Web3KeyProvider.prototype.getWeb3 = function () {
        if (!this._web3)
            throw new Error("Web3 is not connected");
        return this._web3;
    };
    Web3KeyProvider.prototype.createContract = function (abi, address) {
        var web3 = this.getWeb3();
        return new web3.eth.Contract(abi, address);
    };
    Web3KeyProvider.prototype.getLatestBlockHeight = function () {
        return this._latestBlockHeight;
    };
    Web3KeyProvider.prototype.latestBlockHeightOrWait = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sleepFor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sleepFor = function (ms) {
                            return new Promise(function (resolve) { return setTimeout(resolve, ms); });
                        };
                        _a.label = 1;
                    case 1:
                        if (!(this._latestBlockHeight < 0)) return [3 /*break*/, 3];
                        console.log("Waiting for latest block height...");
                        return [4 /*yield*/, sleepFor(1000)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, this._latestBlockHeight];
                }
            });
        });
    };
    Web3KeyProvider.prototype.watchAsset = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var web3, ethereum, params, success;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        web3 = this.getWeb3(), ethereum = web3.currentProvider;
                        params = {
                            type: config.type,
                            options: {
                                address: config.address,
                                symbol: config.symbol,
                                decimals: config.decimals,
                                image: config.image,
                            },
                        };
                        return [4 /*yield*/, ethereum.request({
                                method: 'wallet_watchAsset',
                                params: params,
                            })];
                    case 1:
                        success = _a.sent();
                        if (!success) {
                            throw new Error("Failed to watch asset, something went wrong");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Web3KeyProvider.prototype.isMetaMask = function () {
        try {
            var web3 = this.getWeb3();
            if (!web3.hasOwnProperty('isMetaMask')) {
                return false;
            }
            return web3.isMetaMask();
        }
        catch (e) {
            console.error("Unable to check is Web3 MetaMask: " + e);
        }
        return false;
    };
    Web3KeyProvider.parseWalletError = function (e) {
        console.error("Can't sign message: " + e);
        var message = (e.message || e.error).substr(0, e.message.indexOf('\n')), parts = message.split(':');
        /* try to detect angry MetaMask messages */
        if (parts.length > 0) {
            /* special case for Firefox that doesn't return any errors, only extension stack trace */
            if (message.includes('@moz-extension') &&
                message.includes('Returned error: value')) {
                return new Error('User denied message signature');
            }
            /* cases for other browsers (tested in Chrome, Opera, Brave) */
            if (message.includes('MetaMask') ||
                message.includes('Returned error') ||
                message.includes('RPC Error')) {
                return new Error(parts[parts.length - 1]);
            }
        }
        return e;
    };
    Web3KeyProvider.prototype.signData = function (data, address) {
        return __awaiter(this, void 0, void 0, function () {
            var sig, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        if (typeof data === 'object') {
                            data = (0, web3_utils_1.bytesToHex)(data);
                        }
                        this.eventEmitter.emit(events_2.EVENT_BEFORE_SIGN_DATA, {
                            keyProvider: this,
                            data: data,
                            signer: address
                        });
                        sig = void 0;
                        if (!this.isMetaMask()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getWeb3().eth.personal.sign(data, address, '')];
                    case 1:
                        sig = _a.sent();
                        return [3 /*break*/, 3];
                    case 2: 
                    // const provider = this.getWeb3().currentProvider as AbstractProvider;
                    // if (!provider) throw new Error(`There is no provider for Web3`);
                    // sig = await provider.request({method: 'eth_sign', params: [address, data]});
                    // return sig as string;
                    throw new Error("NIY");
                    case 3:
                        this.eventEmitter.emit(events_2.EVENT_AFTER_SIGN_DATA, {
                            keyProvider: this,
                            data: data,
                            signer: address,
                            sig: sig
                        });
                        return [2 /*return*/, sig];
                    case 4:
                        e_2 = _a.sent();
                        throw Web3KeyProvider.parseWalletError(e_2);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Web3KeyProvider.prototype.sendTransactionAsync = function (from, to, sendOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var gasPrice, nonce, tx;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.eventEmitter.emit(events_2.EVENT_BEFORE_SEND_TRANSACTION, {
                            keyProvider: this,
                            from: from,
                            to: to,
                            sendOptions: sendOptions,
                        });
                        return [4 /*yield*/, this.getWeb3().eth.getGasPrice()];
                    case 1:
                        gasPrice = _a.sent();
                        console.log('Gas Price: ' + gasPrice);
                        nonce = sendOptions.nonce;
                        if (!!nonce) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getWeb3().eth.getTransactionCount(from)];
                    case 2:
                        nonce = _a.sent();
                        _a.label = 3;
                    case 3:
                        console.log('Nonce: ' + nonce);
                        tx = {
                            from: from,
                            to: to,
                            value: (0, web3_utils_1.numberToHex)(sendOptions.value || '0'),
                            gas: (0, web3_utils_1.numberToHex)(sendOptions.gasLimit || '500000'),
                            gasPrice: gasPrice,
                            data: sendOptions.data,
                            nonce: nonce,
                            chainId: this._currentChain,
                        };
                        // if (sendOptions.estimate) {
                        //   const gasEstimation = await this.getWeb3().eth.estimateGas(tx);
                        //   console.log(`Gas estimation is: ${gasEstimation}`);
                        //   if (sendOptions.gasLimit && Number(gasEstimation) > Number(sendOptions.gasLimit)) {
                        //     throw new Error(`Gas estimation exceeds possible limit`);
                        //   }
                        // }
                        console.log('Sending transaction via Web3: ', tx);
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var promise = _this.getWeb3().eth.sendTransaction(tx);
                                promise
                                    .once('transactionHash', function (transactionHash) { return __awaiter(_this, void 0, void 0, function () {
                                    var rawTx, rawTxHex;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                console.log("Just signed transaction has is: " + transactionHash);
                                                return [4 /*yield*/, this.getWeb3().eth.getTransaction(transactionHash)];
                                            case 1:
                                                rawTx = _a.sent();
                                                console.log("Found transaction in node: ", JSON.stringify(rawTx, null, 2));
                                                rawTxHex = '';
                                                try {
                                                    rawTxHex = this.tryGetRawTx(rawTx);
                                                }
                                                catch (e) {
                                                    console.error("Failed to get raw transaction: " + e.message);
                                                }
                                                this.eventEmitter.emit(events_2.EVENT_AFTER_SEND_TRANSACTION, {
                                                    keyProvider: this,
                                                    from: from,
                                                    to: to,
                                                    sendOptions: sendOptions,
                                                    transactionHash: transactionHash,
                                                    rawTransaction: rawTxHex,
                                                });
                                                resolve({
                                                    receiptPromise: promise,
                                                    transactionHash: transactionHash,
                                                    rawTransaction: rawTxHex,
                                                });
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })
                                    .catch(reject);
                            })];
                }
            });
        });
    };
    Web3KeyProvider.prototype.tryGetRawTx = function (rawTx) {
        if (!common_1.default.isSupportedChainId(new ethereumjs_util_1.BN(this._currentChain))) {
            console.warn("raw tx can't be created for this chain id " + this._currentChain);
            return '';
        }
        var v = rawTx.v, r = rawTx.r, s = rawTx.s; /* this fields are not-documented */
        var newTx = new tx_1.Transaction({
            gasLimit: this.getWeb3().utils.numberToHex(rawTx.gas),
            gasPrice: this.getWeb3().utils.numberToHex(Number(rawTx.gasPrice)),
            to: "" + rawTx.to,
            nonce: this.getWeb3().utils.numberToHex(rawTx.nonce),
            data: rawTx.input,
            v: v,
            r: r,
            s: s,
            value: this.getWeb3().utils.numberToHex(rawTx.value),
        }, {
            common: common_1.default.custom({}, { baseChain: this._currentChain }),
        });
        if (!newTx.verifySignature())
            throw new Error("The signature is not valid for this transaction");
        console.log("New Tx: ", JSON.stringify(newTx, null, 2));
        var rawTxHex = newTx.serialize().toString('hex');
        console.log("Raw transaction hex is: ", rawTxHex);
        return rawTxHex;
    };
    Web3KeyProvider.prototype.getNativeBalance = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWeb3().eth.getBalance(address)];
                    case 1:
                        balance = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.BigNumber("" + balance)
                                .dividedBy(new bignumber_js_1.BigNumber(10).pow(18))];
                }
            });
        });
    };
    Web3KeyProvider.prototype.getTokenBalance = function (contract, address) {
        return __awaiter(this, void 0, void 0, function () {
            var balance, decimals, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, contract.methods.balanceOf(address).call()];
                    case 1:
                        balance = _a.sent();
                        decimals = 18;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, contract.methods.decimals().call()];
                    case 3:
                        decimals = _a.sent();
                        if (!Number(decimals)) {
                            decimals = 18;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_3 = _a.sent();
                        console.error("Unable to calculate contract decimals: " + e_3);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, new bignumber_js_1.BigNumber("" + balance).dividedBy(new bignumber_js_1.BigNumber(10).pow(decimals))];
                }
            });
        });
    };
    return Web3KeyProvider;
}());
exports.Web3KeyProvider = Web3KeyProvider;
var DelegateWeb3KeyProvider = /** @class */ (function () {
    function DelegateWeb3KeyProvider() {
    }
    DelegateWeb3KeyProvider.prototype.connect = function (web3) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.connect(web3)];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.connectFromInjected = function () {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.connectFromInjected()];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.createContract = function (abi, address) {
        return this.getDelegate().createContract(abi, address);
    };
    DelegateWeb3KeyProvider.prototype.currentAccount = function () {
        return this.getDelegate().currentAccount();
    };
    DelegateWeb3KeyProvider.prototype.currentChain = function () {
        return this.getDelegate().currentChain();
    };
    DelegateWeb3KeyProvider.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.disconnect()];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.getLatestBlockHeight = function () {
        return this.getDelegate().getLatestBlockHeight();
    };
    DelegateWeb3KeyProvider.prototype.getNativeBalance = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.getNativeBalance(address)];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.getTokenBalance = function (contract, address) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.getTokenBalance(contract, address)];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.getWeb3 = function () {
        return this.getDelegate().getWeb3();
    };
    DelegateWeb3KeyProvider.prototype.isConnected = function () {
        return this.getDelegate().isConnected();
    };
    DelegateWeb3KeyProvider.prototype.latestBlockHeightOrWait = function () {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.latestBlockHeightOrWait()];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.watchAsset = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.watchAsset(config)];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.sendTransactionAsync = function (from, to, sendOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.sendTransactionAsync(from, to, sendOptions)];
                }
            });
        });
    };
    DelegateWeb3KeyProvider.prototype.signData = function (data, address) {
        return __awaiter(this, void 0, void 0, function () {
            var delegate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDelegateAsync()];
                    case 1:
                        delegate = _a.sent();
                        return [2 /*return*/, delegate.signData(data, address)];
                }
            });
        });
    };
    return DelegateWeb3KeyProvider;
}());
var Web3KeyProviderAlwaysConnected = /** @class */ (function (_super) {
    __extends(Web3KeyProviderAlwaysConnected, _super);
    function Web3KeyProviderAlwaysConnected(keyProvider) {
        var _this = _super.call(this) || this;
        _this.keyProvider = keyProvider;
        return _this;
    }
    Web3KeyProviderAlwaysConnected.prototype.getDelegate = function () {
        return this.keyProvider;
    };
    Web3KeyProviderAlwaysConnected.prototype.getDelegateAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.keyProvider.isConnected()) {
                            return [2 /*return*/, this.keyProvider];
                        }
                        return [4 /*yield*/, this.keyProvider.connectFromInjected()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.keyProvider];
                }
            });
        });
    };
    return Web3KeyProviderAlwaysConnected;
}(DelegateWeb3KeyProvider));
function alwaysConnectedWeb3KeyProvider(keyProvider) {
    if (keyProvider instanceof Web3KeyProviderAlwaysConnected) {
        return keyProvider;
    }
    return new Web3KeyProviderAlwaysConnected(keyProvider);
}
exports.alwaysConnectedWeb3KeyProvider = alwaysConnectedWeb3KeyProvider;
//# sourceMappingURL=web3.js.map