version: 2.1

orbs:
  puppeteer: threetreeslight/puppeteer@0.1.2

jobs:
  app_build: &app_build
    docker:
      - image: circleci/node:16.12.0-browsers
    working_directory: ~/app
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '.'
      - run:
          name: 'Build Ankr Protocol'
          command: |
            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            export CI=true;
            PATH=~/app/node_modules/.bin:$PATH
            node --version
            npm --version
            yarn build
      - persist_to_workspace:
          root: '.'
          paths:
            - '.'
  build_app_stage:
    <<: *app_build
  build_app_prod:
    <<: *app_build
  build_app_back_stage:
    <<: *app_build
  app_deploy_cdn: &app_deploy_cdn
    docker:
      - image: bigbadalien/awscli-node-kops-kubectl:0.3
    environment:
      O: Ankr-network
      R: ankr-protocol
    working_directory: ~/app
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '.'
      - run:
          name: 'Log in to AWS ECR'
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: 'Deploy Ankr Protocol to CDN'
          command: |
            echo "Uploading assets to $DOMAIN"
            aws s3 cp ~/app/build s3://$DOMAIN/protocol/ --acl public-read --recursive --cache-control "public,max-age=600,s-maxage=3600"
            aws configure set preview.cloudfront true
            echo "Invalidating CDN network"
            INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' | jq -r '.Invalidation.Id'`
            echo "Invalidation ID is $INVALIDATION_ID"
            echo "CDN Invalidation request is sent."
  deploy_app_stage_to_stage:
    <<: *app_deploy_cdn
  deploy_app_prod:
    <<: *app_deploy_cdn
  deploy_app_back_to_stage:
    <<: *app_deploy_cdn

  install_dependencies:
    docker:
      - image: tarampampam/node:14-alpine
    environment:
      O: Ankr-network
      R: ankr-protocol
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: 'Yarn install'
          command: |
            yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: '.'
          paths:
            - '.'
workflows:
  version: 2
  wf_protocol:
    jobs:
      - hold_build:
          type: approval
      - install_dependencies:
          requires:
            - hold_build

      # prep
      - hold_build_stage:
          type: approval
          requires:
            - hold_build
          filters: &non_prod
            branches:
              only:
                - /^(?!master$).*/

      # Stage
      - build_app_stage:
          context:
            - ankr_protocol_stage_build
            - ankr_protocol_cicd
          requires:
            - install_dependencies
            - hold_build_stage
          filters:
            <<: *non_prod
      - hold_app_stage_to_stage:
          type: approval
          requires:
            - hold_build_stage
          filters:
            <<: *non_prod

      - deploy_app_stage_to_stage:
          context:
            - ankr_protocol_stage_deploy
            - ankr_protocol_cicd
          requires:
            - build_app_stage
            - hold_app_stage_to_stage
          filters:
            <<: *non_prod

      # Prod
      - build_app_prod:
          context:
            - ankr_protocol_prod_build
            - ankr_protocol_cicd
          filters: &prod_only
            branches:
              only:
                - master
          requires:
            - install_dependencies
      - deploy_app_prod:
          context:
            - ankr_protocol_prod_deploy
            - ankr_protocol_cicd
          requires:
            - build_app_prod
          filters:
            <<: *prod_only
      - build_app_back_stage:
          context:
            - ankr_protocol_stage_build
            - ankr_protocol_cicd
          requires:
            - deploy_app_prod
          filters:
            <<: *prod_only
      - deploy_app_back_to_stage:
          context:
            - ankr_protocol_stage_deploy
            - ankr_protocol_cicd
          requires:
            - build_app_back_stage
          filters:
            <<: *prod_only
